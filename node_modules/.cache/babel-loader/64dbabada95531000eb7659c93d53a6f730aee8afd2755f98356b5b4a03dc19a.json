{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ratau\\\\Desktop\\\\Gato\\\\src\\\\components\\\\TicTacToe\\\\index.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport GameBoard from '../GameBoard';\nimport './style.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialBoard = Array(9).fill(null);\nconst TicTacToe = () => {\n  _s();\n  const [board, setBoard] = useState(initialBoard);\n  const [currentPlayer, setCurrentPlayer] = useState(\"X\");\n  const [winner, setWinner] = useState(null);\n  const [winningCells, setWinningCells] = useState([]);\n  const handleCellClick = index => {\n    if (board[index] || winner) {\n      return;\n    }\n    const newBoard = [...board];\n    newBoard[index] = currentPlayer;\n    setBoard(newBoard);\n    checkWinner(newBoard);\n    setCurrentPlayer(currentPlayer === \"X\" ? \"O\" : \"X\");\n  };\n  const checkWinner = board => {\n    const winningConditions = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n    for (let condition of winningConditions) {\n      const [a, b, c] = condition;\n      if (board[a] && board[a] === board[b] && board[a] === board[c]) {\n        setWinner(board[a]);\n        setWinningCells([a, b, c]);\n        return;\n      }\n    }\n    if (board.every(cell => cell !== null)) {\n      setWinner(\"draw\");\n    }\n  };\n  const resetGame = () => {\n    setBoard(initialBoard);\n    setCurrentPlayer(\"X\");\n    setWinner(null);\n    setWinningCells([]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"app-title\",\n      children: [\"Tic-\", /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Tac\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 43\n      }, this), \"-Toe\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(GameBoard, {\n      winner: winner,\n      currentPlayer: currentPlayer,\n      winningCells: winningCells,\n      handleCellClick: handleCellClick,\n      resetGame: resetGame,\n      board: board\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n};\n_s(TicTacToe, \"N5iUUPbrNc+OmkjT7rQZe7uMEd0=\");\n_c = TicTacToe;\nexport default TicTacToe;\nvar _c;\n$RefreshReg$(_c, \"TicTacToe\");","map":{"version":3,"names":["React","useState","GameBoard","jsxDEV","_jsxDEV","initialBoard","Array","fill","TicTacToe","_s","board","setBoard","currentPlayer","setCurrentPlayer","winner","setWinner","winningCells","setWinningCells","handleCellClick","index","newBoard","checkWinner","winningConditions","condition","a","b","c","every","cell","resetGame","children","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ratau/Desktop/Gato/src/components/TicTacToe/index.jsx"],"sourcesContent":["import React, { useState } from 'react'\r\nimport GameBoard from '../GameBoard';\r\nimport './style.css'\r\n\r\nconst initialBoard = Array(9).fill(null);\r\n\r\nconst TicTacToe = () => {\r\n    const [board, setBoard] = useState(initialBoard);\r\n    const [currentPlayer, setCurrentPlayer] = useState(\"X\");\r\n    const [winner, setWinner] = useState(null);\r\n    const [winningCells, setWinningCells] = useState([])\r\n\r\n    const handleCellClick = (index) => {\r\n        if (board[index] || winner) {\r\n            return;\r\n        }\r\n        const newBoard = [...board];\r\n        newBoard[index] = currentPlayer;\r\n        setBoard(newBoard);\r\n\r\n        checkWinner(newBoard);\r\n        setCurrentPlayer(currentPlayer === \"X\" ? \"O\" : \"X\");\r\n    };\r\n\r\n    const checkWinner = (board) => {\r\n        const winningConditions = [\r\n            [0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6],\r\n            [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6],\r\n        ];\r\n\r\n        for (let condition of winningConditions) {\r\n            const [a, b, c] = condition;\r\n            if (board[a] && board[a] === board[b] && board[a] === board[c]) {\r\n                setWinner(board[a]);\r\n                setWinningCells([a, b, c])\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (board.every((cell) => cell !== null)) {\r\n            setWinner(\"draw\");\r\n        }\r\n    };\r\n\r\n    const resetGame = () => {\r\n        setBoard(initialBoard);\r\n        setCurrentPlayer(\"X\");\r\n        setWinner(null);\r\n        setWinningCells([])\r\n    };\r\n    return (\r\n        <div>\r\n            <h1 className=\"app-title\">Tic-<span>Tac</span>-Toe</h1>\r\n            <GameBoard winner={winner} currentPlayer={currentPlayer}\r\n                winningCells={winningCells} handleCellClick={handleCellClick}\r\n                resetGame={resetGame} board={board} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TicTacToe"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}